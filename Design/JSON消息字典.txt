消息格式 MessageFormat (App <-> or <- or -> Server）
{
    "header":
    {
		"deviceId": "ABCD1234",
		"messageId": "MessageName",
		"timeStamp": "2013-08-14 21:18:49" // App启动后首次收到Server发来的消息时需要计算两边时间差并保存留用
    },
    "body": 
    {
		"param1": "value1",
		"param2": "value2",
		"paramn": "valuen"
    }
}

1. 错误 ErrorResponse (App <-> Server)
{
    "header":
    {
		"deviceId": "ABCD1234",
		"messageId": "ErrorResponse",
		"timeStamp": "2013-08-14 21:18:49"
    },
    "body":
    {
		"requestMessage": "AlohaRequest",
		"errorCode": "-7",
      	"errorDescription": "Empty Content"
    }
}

2. 测试请求 AlohaRequest (App <-> Server)
{
    "header":
    {
		"deviceId": "ABCD1234",
		"messageId": "AlohaRequest",
		"timeStamp": "2013-08-14 21:18:49"
    },
    "body":
    {
    	"content":"Hello Server!"
    }
}

3. 测试响应 AlohaResponse (App <-> Server)
{
    "header":
    {
		"deviceId": "ABCD1234",
		"messageId": "AlohaResponse",
		"timeStamp": "2013-08-14 21:18:49"
    },
    "body":
    {
    	"content":"Hello App!"
    }
}

4. 设备信息请求 DeviceDataRequest (App -> Server)
{
    "header":
    {
		"deviceId": "ABCD1234",
		"messageId": "DeviceDataRequest",
		"timeStamp": "2013-08-14 21:18:49"
    },
    "body": 
    {
		"dataQuery": // 一个消息里包含了查询和更新两种操作，是否不如一个消息里只有一种操作简单明了？
		{
			"deviceCard":{},
			"impressionCard":{}		
		},
		"dataUpdate":
		{
			"interestCard":{}
		}
    }
}

5. 设备信息响应 DeviceDataResponse (App <- Server)
{
    "header":
    {
		"deviceId": "ABCD1234",
		"messageId": "DeviceDataResponse",
		"timeStamp": "2013-08-14 21:18:49"
    },
    "body": 
    {
		"dataQuery":
		{
			"deviceCard":{},
			"impressionCard":{}		
		},
		"dataUpdate":
		{
			"interestCard":{}
		}
    }
}

6. Server信息查询请求 ServerDataQueryRequest (App -> Server)
{
    "header":
    {
		"deviceId": "ABCD1234",
		"messageId": "ServerDataQueryRequest",
		"timeStamp": "2013-08-14 21:18:49"
    }
    "body": 
    {
		"onlineDeviceCount":""
    }
}

7. Server信息查询响应 ServerDataQueryResponse (App <- Server)
{
    "header":
    {
		"deviceId": "ABCD1234",
		"messageId": "ServerDataQueryResponse",
		"timeStamp": "2013-08-14 21:18:49"
    }
    "body": 
    {
		"onlineDeviceCount":"3601"
    }
}

8. 业务会话通知 BusinessSessionNotification (App <- Server)
{
	"header":
   {
		"deviceId": "ABCD1234",
		"messageId": "BusinessSessionRequest",
		"timeStamp": "2013-08-14 21:18:49"
   }
	"body": 
	{
		"BusinessSessionId":"9861ASFDE"
	}
}

9. 业务会话通知响应 BusinessSessionNotificationResponse (App -> Server)
{
	"header":
   {
		"deviceId": "ABCD1234",
		"messageId": "BusinessSessionResponse",
		"timeStamp": "2013-08-14 21:18:49"
   }
	"body": 
	{
		"BusinessSessionId":"9861ASFDE"
	}
}

10. 业务会话操作请求 BusinessSessionOperationRequest (App -> Server)
{
	"header":
   {
		"deviceId": "ABCD1234",
		"messageId": "BusinessSessionOperationRequest",
		"timeStamp": "2013-08-14 21:18:49"
   }
	"body": 
	{
		"OperationType": "WebRTCEnded", // "ImpressionEvaluated"
		"OperationValue": ""
	}
}

11. 业务会话操作响应 BusinessSessionOperationResponse (App <- Server)
{
	"header":
   {
		"deviceId": "ABCD1234",
		"messageId": "BusinessSessionOperationRequest",
		"timeStamp": "2013-08-14 21:18:49"
   }
	"body": 
	{
		"OperationType": "EndWebRTC",
		"OperationValue": "",
		"OperationResult": "Success" // "Fail"
	}
}

12. Server广播通知 BroadcastNotification (App <- Server)
{
	"header":
   {
		"deviceId": "",
		"messageId": "BroadcastNotification",
		"timeStamp": "2013-08-14 21:18:49"
   }
	"body": 
	{
		"content":"This is a broadcast message!"
	}
}